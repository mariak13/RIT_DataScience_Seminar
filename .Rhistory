geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggarrange(p1,p2,p3,p4,p5,p6)
p1 <- ggplot(data = data, aes( x = alcohol, y = citric.acid) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p2 <- ggplot(data = data, aes( x = alcohol, y = pH) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p3 <- ggplot(data = data, aes( x = alcohol, y = fixed.acidity) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p4 <- ggplot(data = data, aes( x = alcohol, y = residual.sugar) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p5 <- ggplot(data = data, aes( x = alcohol, y = density) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p6 <- ggplot(data = data, aes( x = alcohol, y = chlorides) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggarrange(p1,p2,p3,p4,p5,p6)
ggarrange(p1,p2,p3,p4,p5,p6)
ggarrange(p1,p2,p3,p4,p5,p6, ncol = 2, nrow = 3)
?lm
data
lm(formula = alcohol ~ pH + density, data = data)
fit = lm(formula = alcohol ~ pH + density, data = data)
fit
fit = lm(formula = alcohol ~ pH + density, data = data)
data$pH
fit
summary(fit)
fit = lm(formula = alcohol ~ pH + density + chlorides, data = data)
summary(fit)
fit = lm(formula = alcohol ~ pH + chlorides, data = data)
summary(fit)
fit = lm(formula = alcohol ~ pH + chlorides + residual.sugar, data = data)
summary(fit)
fit = lm(formula = alcohol ~ chlorides + residual.sugar, data = data)
summary(fit)
fit = lm(formula = alcohol ~ pH + desnity + residual.sugar, data = data)
summary(fit)
fit = lm(formula = alcohol ~ density + residual.sugar, data = data)
summary(fit)
fit = lm(formula = alcohol ~ density + residual.sugar + , data = data)
summary(fit)
fit = lm(formula = alcohol ~ density + residual.sugar  , data = data)
summary(fit)
fit = lm(formula = alcohol ~ density + residual.sugar  + fixed.acidity, data = data)
summary(fit)
1:nrow(data)
sample(1:nrow(data), size = 0.8*nrow(data), replace = F)
index_df = sample(1:nrow(data), size = 0.8*nrow(data), replace = F)
test = data[-index_df, ]
train = data[index_df, ]
fit = lm(formula = alcohol ~ density + residual.sugar + fixed.acidity, data = train)
summary(fit)
predict(fit, test)
y_hat_alk = predict(fit, test)
test$alcohol - y_hat_alk
test$RSS = test$alcohol - y_hat_alk
View(test)
test$RSS = (test$alcohol - y_hat_alk)^2
View(test)
library(Metrics)
rmse(actual = test$alcohol, predicted = y_hat_alk)
test$alcohol
# remove NAs
data = na.omit(data)
index_df = sample(1:nrow(data), size = 0.8*nrow(data), replace = F)
train = data[index_df, ]
test = data[-index_df, ]
fit = lm(formula = alcohol ~ density + residual.sugar + fixed.acidity, data = train)
summary(fit)
rmse(actual = test$alcohol, predicted = y_hat_alk)
index_df = sample(1:nrow(data), size = 0.8*nrow(data), replace = F)
train = data[index_df, ]
test = data[-index_df, ]
fit = lm(formula = alcohol ~ density + residual.sugar + fixed.acidity, data = train)
summary(fit)
rmse(actual = test$alcohol, predicted = y_hat_alk)
y_hat_alk
y_hat_alk = predict(fit, test)
rmse(actual = test$alcohol, predicted = y_hat_alk)
summary(data$alcohol)
# root mean squered error
rmse(actual = test$alcohol, predicted = y_hat_alk)
summary(data$alcohol)
hist(data$alcohol)
hist(data$alcohol, breaks = 100)
ggarrange(p1,p2,p3,p4,p5,p6, ncol = 2, nrow = 3)
data$fixed.acidity
7.3 == data$fixed.acidity
View(data)
mean(1)
sqrt(9)
base::colSums(data)
# : represents from-to sequence of numbers
1:5
3:9
# accessing specific rowS and columnS
data[1:3, 3:4]
data[1:3, "pH"]
data[, 1] # give me everything for first column
# vector
col_i_want <- c(1,2,5)
col_i_want <- c("residual.sugar","pH")
colnames(data)
data[1, col_i_want] # ask for first row and columns 1,2,5
# vectors
# I want multiple columns but they are not sequential
col_i_want <- c(1,2,5) # I make my vector variable
data[1, col_i_want] # ask for first row and columns 1,2,5
# data types in R
typeof(data$fixed.acidity)
data
typeof(data$quality)
# Let's make few basic R plots
plot(data$pH, data$density) # x,y scatter plot
plot(x = data$pH, y = data$density) # x,y scatter plot
plot(y = data$pH, x = data$density) # x,y scatter plot
hist(data$fixed.acidity)
ggplot(data = data, aes( x = sulphates, y = pH, color = type) ) +
geom_point() +
theme_minimal()
# check correlation between two variables
cor.test(data$pH, data$citric.acid)
# making nice plots
ggplot(data = data, aes( x = sulphates, y = pH) ) +
geom_point() +
theme_minimal()
# remind ourselves about the data
summary(data)
ggplot(data = data, aes( x = sulphates, y = pH) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
# ggplot structure
ggplot(data = data, aes(x = sulphates , y = pH))
ggplot(data = data, aes(x = sulphates , y = pH)) +
geom_point()
ggplot(data = data, aes(x = sulphates , y = pH)) +
geom_point() +
theme_minimal()
# we can have multiple layers on the same plot
ggplot(data = data, aes(x = sulphates , y = pH)) +
geom_point() +
geom_area() +
theme_minimal()
# we can have multiple layers on the same plot
ggplot(data = data, aes(x = sulphates , y = pH)) +
geom_point() +
geom_line() +
theme_minimal()
# we can remove aes() from ggplot and add it to geom_point()
ggplot(data = data) +
geom_point( aes(x = sulphates , y = pH)) +
theme_minimal()
# but when I add geom_line now, lin
ggplot(data = data) +
geom_point( aes(x = sulphates , y = pH)) +
geom_line() +
theme_minimal()
# so we have to explicitly write
ggplot(data = data) +
geom_point( aes(x = sulphates , y = pH)) +
geom_line(aes(x = sulphates , y = pH)) +
theme_minimal()
# this is usefull if you want to plot multiple variables on the same plot
# rarely looks good but there is an option..
ggplot(data = data) +
geom_point( aes(x = sulphates , y = pH)) +
geom_line(aes(x = sulphates , y = density)) +
theme_minimal()
# this is usefull if you want to plot multiple variables on the same plot
# rarely looks good but there is an option..
ggplot(data = data) +
geom_point( aes(x = sulphates , y = pH)) +
geom_line(aes(x = sulphates , y = alchocol)) +
theme_minimal()
# this is usefull if you want to plot multiple variables on the same plot
# rarely looks good but there is an option..
ggplot(data = data) +
geom_point( aes(x = sulphates , y = pH)) +
geom_line(aes(x = sulphates , y = alcohol)) +
theme_minimal()
ggplot(data = data) +
geom_point( aes(x = sulphates , y = pH, color = "Sulphate ~ pH")) +
geom_line(aes(x = sulphates , y = alcohol, color = "Sulphates ~ alcohol")) +
theme_minimal()
ggplot(data = data) +
geom_point(aes(x = sulphates , y = pH, color = "Sulphate ~ pH")) +
geom_point(aes(x = sulphates , y = alcohol, color = "Sulphates ~ alcohol")) +
theme_minimal()
?geom_point
?geom_line
ggplot(data = data, aes( x = sulphates, y = pH) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data = data, aes( x = pH, y = alcohol) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data = data, aes( x = pH, y = alcohol) ) +
geom_point() +
theme_minimal()
# let's illustrate the relationship
ggplot(data = data, aes( x = pH, y = alcohol) ) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm")
# we can also check correlation between those to variables
ggplot(data = data, aes( x = pH, y = alcohol) ) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
stat_cor()
ggplot(data = data, aes( x = alcohol, y = citric.acid) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
data$citric.acid
ggplot(data = data, aes( x = alcohol, y = citric.acid) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() + scale_x_log10() +
theme_minimal()
ggplot(data = data, aes( x = alcohol, y = citric.acid) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data = data, aes( y = alcohol, x = citric.acid) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
# build them one by one and store them in variable p1,p2,p3,....
p1 <- ggplot(data = data, aes( x = fixed.acidity, y = alcohol, fill = type) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p2 <- ggplot(data = data, aes( x = residual.sugar, y = alcohol, fill = type) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p3 <- ggplot(data = data, aes( x = free.sulfur.dioxide, y = alcohol, fill = type) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p4 <- ggplot(data = data, aes( x = total.sulfur.dioxide, y = alcohol, fill = type) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggarrange(p1,p2,p3,p4)
# build them one by one and store them in variable p1,p2,p3,....
p1 <- ggplot(data = data, aes( x = fixed.acidity, y = alcohol) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p2 <- ggplot(data = data, aes( x = residual.sugar, y = alcohol) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p3 <- ggplot(data = data, aes( x = free.sulfur.dioxide, y = alcohol) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p4 <- ggplot(data = data, aes( x = total.sulfur.dioxide, y = alcohol) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggarrange(p1,p2,p3,p4)
ggplot(data = data, aes( x = type, y = alcohol) ) +
geom_boxplot() +
theme_minimal()
ggplot(data = data, aes( x = type, y = alcohol, fill = type) ) +
geom_boxplot() +
theme_minimal()
# how to check if there is statistical significant difference between groups?
# t.test or wilcoxon-mann-whitney test
# t test assumes normal distribution so lets check how is data distributed
hist(data$alcohol)
# how to check if there is statistical significant difference between groups?
# t.test or wilcoxon-mann-whitney test
# t test assumes normal distribution so lets check how is data distributed
hist(data$alcohol, breaks = 100)
# well not really normally distributed
ggplot(data = data, aes( x = type, y = alcohol, fill = type) ) +
geom_boxplot() +
theme_minimal() +
stat_compare_means(method ="wilcox")
ggplot(data = data, aes( x = type, y = alcohol, fill = type) ) +
geom_boxplot() +
theme_minimal() +
stat_compare_means(method ="t.test")
# always check the normality of the data because you might draw wrong conclusions
# according to t-test it is significant
ggplot(data = data, aes( x = type, y = alcohol, fill = type) ) +
geom_boxplot() +
theme_minimal() +
stat_compare_means(method ="t.test")
summary(data$alcohol)
# Let's see if correlations are affected within the color-group
p1 <- ggplot(data = data, aes( x = fixed.acidity, y = alcohol, color = type) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p2 <- ggplot(data = data, aes( x = residual.sugar, y = alcohol, color = type) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p3 <- ggplot(data = data, aes( x = free.sulfur.dioxide, y = alcohol, color = type) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
p4 <- ggplot(data = data, aes( x = total.sulfur.dioxide, y = alcohol, color = type) ) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggarrange(p1,p2,p3,p4)
setwd("~/Desktop/RIT_Seminar_Data_Science")
############# ############ ############  Intro to Rstudio ############ ############ ############ ############
1
############# ############ ############  Intro to Rstudio ############ ############ ############ ############
1
4
############# ############ ############  Intro to Rstudio ############ ############ ############ ############
2, 2,3,4
mean(1)
mean(2)
# Plots tab, all of your plots will be here
# Help page !!!!
?mean()
# Plots tab, all of your plots will be here
# Help page !!!!
?mean
x <- c(0:10, 50)
x
xm <- mean(x)
mean(x)
var = mean(x)
mean(x)
mean(x)
?read.csv
# returns dataframe
data <- read.csv("winequalityN.csv", sep = "\t") # every time you run reading the data, check what you actually did
# returns dataframe
data = read.csv("winequalityN.csv", sep = "\t") # every time you run reading the data, check what you actually did
setwd("~/Desktop/RIT_Seminar_Data_Science")
setwd("~/Desktop/RIT_Seminar_Data_Science")
data = read.csv("winequalityN.csv", sep = "\t") # every time you run reading the data, check what you actually did
View(data)
data <- read.csv("winequalityN.csv", sep = ":")
View(data)
setwd("~/Desktop/RIT_Seminar_Data_Science")
read.csv("winequalityN.csv")
data <- read.csv("winequalityN.csv", sep = ",", header = FALSE)
View(data)
data <- read.csv("winequalityN.csv", sep = ",", header = T)
data <- read.csv("winequalityN.csv", sep = ",", header = TRUE)
View(data)
data = read.csv("winequalityN.csv", sep = ",", header = TRUE)
data = read.csv("winequalityN.csv", sep = ",", header = TRUE)
data = read.csv(winequalityN.csv, sep = ",", header = TRUE)
data = read.csv("winequalityN.csv", sep = ",", header = TRUE)
View(data)
?summary
summary(data)
data$alcohol
mean(data$alcohol)
# Column with NA
mean(data$pH)
summary(data)
# Column with NA
mean(data$pH)
# remove NAs in computation
mean(data$pH, na.rm= T)
median(data$volatile.acidity)
median(data$volatile.acidity)
# other functions for example
abs(-2.2)
sqrt(9)
# colSums()
dim(data) # check dimension of your matrix
data[2,3]
View(data)
############# ############ ############  Accessing specific column ############ ############ ############
data[1, "pH"]
data[, "pH"] # comma means 'everything', so this is give me all rows for column 'pH'
data[, 1] # give me everything for first column
# accessing specific row
data[55,] # give me all colums for row number 55
colnames(data)
data[, "ph"] # comma means 'everything', so this is give me all rows for column 'pH'
colnames(data)
View(data)
# : represents from-to sequence of numbers
3:8
1:5
3:9
# accessing specific rowS and columnS
data[1:5, 5:7]
data[1:3, 3:4]
data[1:3, "pH"] # when we ask for single column such as pH we actaully get a vector (list) of values
data[1:3, "co2"] # when we ask for single column such as pH we actaully get a vector (list) of values
1:3
# vectors
# I want multiple columns but they are not sequential
c(1,2,5) # I make my vector variable
# vectors
# I want multiple columns but they are not sequential
col_i_want <- c(1,2,5) # I make my vector variable
data[1,col_i_want ] # ask for first row and columns 1,2,5
data[col_i_want, 1 ] # ask for first row and columns 1,2,5
data[col_i_want, 2 ] # ask for first row and columns 1,2,5
# I can do that by refering to columns by name(becareful about typos) it has to be exactly the same
col_i_want <- c("residual.sugar","pH")
data[1, col_i_want] # ask for first row and columns residual.sugar and pH
# data types in R
typeof(data$fixed.acidity) # double ,float are decimal numbers
# data types in R
typeof(data$fixed.acidity) # double ,float are decimal numbers
typeof(data$quality) # integers are rounded numbers
# Let's make few basic R plots
# Plots go to Plot tab on the right
# they can be exported, zoomed and resized, deleted, etc
plot(data$chlorides, data$fixed.acidity)
# Let's make few basic R plots
# Plots go to Plot tab on the right
# they can be exported, zoomed and resized, deleted, etc
plot(x = data$chlorides, y = data$fixed.acidity)
# Let's make few basic R plots
# Plots go to Plot tab on the right
# they can be exported, zoomed and resized, deleted, etc
plot(y = data$chlorides, x = data$fixed.acidity)
?plot
plot(data$pH, data$density) # x,y scatter plot
plot(x = data$pH, y = data$density) # x,y scatter plot
plot(y = data$pH, x = data$density) # x,y scatter plot
# Histograms are plots that you do first to check how is your data distributed
hist(data$chlorides)
hist(data$fixed.acidity)
hist(data$fixed.acidity, breaks = 100)
hist(data$residual.sugar, breaks = 200)
hist(data$alcohol, breaks = 200)
hist(data$residual.sugar, breaks = 200)
hist(data$alcohol, breaks = 200)
# check correlation between two variables
?cor.test()
cor.test(data$pH, data$citric.acid)
cor.test(data$residual.sugar, data$free.sulfur.dioxide)
# loading them so you can use functions
library(tidyverse)
library(ggpubr)
# loading them so you can use functions
library(tidyverse)
library(ggpubr)
# making nice plots
ggplot(data = data, aes( x = sulphates, y = pH) ) +
geom_point() +
theme_minimal()
plot(x = data$pH, y = data$citric.acid) # x,y scatter plot
cor.test(data$pH, data$citric.acid)
# Histograms are plots that you do first to check how is your data distributed
hist(data$chlorides)
# Histograms are plots that you do first to check how is your data distributed
hist(data$chlorides, breaks = 100)
# Histograms are plots that you do first to check how is your data distributed
hist(data$chlorides)
# Histograms are plots that you do first to check how is your data distributed
hist(data$chlorides, breaks = 100)
View(data)
View(data)
summary(data)
# loading them so you can use functions
library(tidyverse)
library(ggpubr)
read.csv("potential_datasets/datatest.txt")
read.csv("winequalityN.csv", header = T, sep = ",")
data = read.csv("winequalityN.csv", header = T, sep = ",")
