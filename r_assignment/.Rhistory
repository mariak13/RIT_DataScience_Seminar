geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = methane, y = gdp, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = methane, y = gdp, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
scale_y_log10() +
theme_minimal()
ggplot(data, aes( x = nitrous_oxide, y = gdp)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = nitrous_oxide, y = gdp, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
scale_y_log10() +
theme_minimal()
ggplot(data, aes( x = co2, y = gdp, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
scale_y_log10() +
theme_minimal()
ggplot(data, aes( x = nitrous_oxide, y = gdp, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
scale_y_log10() +
theme_minimal()
ggplot(data, aes( x = nitrous_oxide, y = gdp, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
data$gdp/1000000
data$gdp/10000000
data$gdp/100000000
data$gpd_scale = data$gdp/100000000
ggplot(data, aes( x = total_ghg, y = gpd_scale)) +
geom_point() +
stat_cor() +
geom_smooth(method = "lm") +
theme_minimal()
ggplot(data, aes( x = co2, y = gpd_scale)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = methane, y = gpd_scale)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = nitrous_oxide, y = gpd_scale)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = nitrous_oxide, y = gpd_scale, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = co2, y = gpd_scale, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
scale_y_log10() +
theme_minimal()
ggplot(data, aes( x = co2, y = gpd_scale, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = methane, y = gpd_scale, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
scale_y_log10() +
theme_minimal()
ggplot(data, aes( x = methane, y = gpd_scale, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
# load the data
data = read.csv("guided_project_data.csv", sep = ",", header = T)
data = data %>% filter(country != "United States")
data$gdp_scaled = data$gdp/100000000
# Compare production of few atmospheric gasses (and total_ghg) with GDP for every country
# Use the same plot structure as in previous question
# Hint: add color=country in aes()
ggplot(data, aes( x = nitrous_oxide, y = gdp_scaled, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
# Compare production of few atmospheric gasses (and total_ghg) with GDP for every country
# Use the same plot structure as in previous question
# Hint: add color=country in aes()
ggplot(data, aes( x = nitrous_oxide, y = gdp_scaled, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() + scale_y_sqrt()+
theme_minimal()
# Compare production of few atmospheric gasses (and total_ghg) with GDP for every country
# Use the same plot structure as in previous question
# Hint: add color=country in aes()
ggplot(data, aes( x = nitrous_oxide, y = gdp_scaled, color = country)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() + scale_y_log10()+
theme_minimal()
write.csv(data, file = "guided_project_data.csv", row.names = F)
# load the data
data = read.csv("guided_project_data.csv", sep = ",", header = T)
View(data)
View(data)
View(data)
# Compare populations of each country
# Hint: use boxplots like in previous task
ggplot(data, aes( x = country, y = population)) +
geom_boxplot() +
scale_y_log10() +
theme_minimal()
# Compare populations of each country
# Hint: use boxplots like in previous task
ggplot(data, aes( x = country, y = population)) +
geom_boxplot() +
theme_minimal()
# Compare populations of each country
# Hint: use boxplots like in previous task
ggplot(data, aes( x = country, y = population)) +
geom_boxplot() +
scale_y_log10() +
theme_minimal()
# Are Population and CO2 correlated?
ggplot(data, aes( x = population, y = co2)) +
geom_point() +
stat_cor() +
geom_smooth(method = "lm") +
theme_minimal()
# Are Population and CO2 correlated?
# Hint: Make point=plot having population on x-axis and co2 on y-axis
# use stat_cor() and geom_smooth(method="lm") for interpretation
ggplot(data, aes( x = population, y = co2)) +
geom_point() +
stat_cor() +
geom_smooth(method = "lm") +
theme_minimal()
# Does population-CO2 association change in different countries?
# Hint: Use the same plot as in previous task but add color=country inside aes()
ggplot(data, aes( x = population, y = co2, color = country)) +
geom_point() +
stat_cor() +
geom_smooth(method = "lm") +
theme_minimal()
# Make a model which will predict CO2 levels
lm(co2 ~ nitrous_oxide )
# Make a model which will predict CO2 levels
lm(co2 ~ nitrous_oxide, data = data )
summary(fit)
# Make a model which will predict CO2 levels
fit = lm(co2 ~ nitrous_oxide + methane, data = data )
summary(fit)
ggplot(data, aes( x = methane, y = co2)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = nitrous_oxide, y = co2)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = population, y = co2)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
ggplot(data, aes( x = total_ghg, y = co2)) +
geom_point() +
geom_smooth(method = "lm") +
stat_cor() +
theme_minimal()
fit = lm(co2 ~ nitrous_oxide + population  + methane, data = data )
summary(fit)
fit = lm(co2 ~ population  , data = data )
summary(fit)
summary(fit)
fit = lm(co2 ~ nitrous_oxide + population  + methane, data = data )
summary(fit)
fit = lm(co2 ~ population  + methane, data = data )
summary(fit)
setwd("~/Desktop/RIT_Seminar_Data_Science/r_assignment")
setwd("~/Desktop/RIT_Seminar_Data_Science")
data <- read.csv("potential_datasets/ClimateChange/climate_change_with_tempC.csv", sep = ",", header = T)
# remove all NAs from data
data = na.omit(data)
df = split_data(data) # we split data before and after 2004
train = df[[1]] # we will use data from 1983 - 2004 to make(train) a model
test = df[[2]] # we will use data from 2004 - 2008 to validate (test) our model
ggplot(data, aes(x = N2O, y = TempC))+
geom_point() +
stat_cor() +
geom_smooth(method = "lm") +
theme_minimal()
data <- read.csv("potential_datasets/ClimateChange/climate_change_with_tempC.csv", sep = ",", header = T)
lm(TempC ~ CH4 + CO2)
View(data)
lm(TempC ~ CH4 + CO2)
lm(TempC ~ CH4 + CO2, data = data)
summary(lm(TempC ~ CH4 + CO2 + N2O + CFC.11 + CFC.12, data = data))
summary(lm(TempC ~ CH4 + CO2 + N2O + CFC.11 + CFC.12 + MEI, data = data))
describe_fit <- function(fit){
cat("Your Model: ", as.character(fit$call), "\n")
RSS = crossprod(fit$residuals)
MSE = RSS/length(fit$residuals)
RMSE <- sqrt(MSE)
cat("Model error measures: \n\tRSS=",RSS, ", \n\tMSE=",MSE,", \n\tRMSE=",RMSE, "\n" )
}
data <- read.csv("potential_datasets/ClimateChange/climate_change_with_tempC.csv", sep = ",", header = T)
# remove all NAs from data
data = na.omit(data)
df = split_data(data) # we split data before and after 2004
train = df[[1]] # we will use data from 1983 - 2004 to make(train) a model
test = df[[2]] # we will use data from 2004 - 2008 to validate (test) our model
train = df %>% filter(Year <= 2004)
library(tidyverse)
library(ggpubr)
# this function takes in your data and splits it before 2004 (training) and after 2004(test data)
# list of two dataframes is returned, first one is train, second one is test
split_data <- function(df){
train = df %>% filter(Year <= 2004)
test = df %>% filter(Year > 2004)
return(list(train,test))
}
describe_fit <- function(fit){
cat("Your Model: ", as.character(fit$call), "\n")
RSS = crossprod(fit$residuals)
MSE = RSS/length(fit$residuals)
RMSE <- sqrt(MSE)
cat("Model error measures: RSS=",RSS, ", MSE=",MSE,", RMSE=",RMSE, "\n" )
}
data <- read.csv("potential_datasets/ClimateChange/climate_change_with_tempC.csv", sep = ",", header = T)
# remove all NAs from data
data = na.omit(data)
df = split_data(data) # we split data before and after 2004
train = df[[1]] # we will use data from 1983 - 2004 to make(train) a model
test = df[[2]] # we will use data from 2004 - 2008 to validate (test) our model
setwd("~/Desktop/RIT_Seminar_Data_Science")
setwd("~/Desktop/RIT_Seminar_Data_Science")
library(tidyverse)
library(ggpubr)
# this function takes in your data and splits it before 2004 (training) and after 2004(test data)
# list of two dataframes is returned, first one is train, second one is test
split_data <- function(df){
train = df %>% filter(Year <= 2004)
test = df %>% filter(Year > 2004)
return(list(train,test))
}
describe_fit <- function(fit){
cat("Your Model: ", as.character(fit$call), "\n")
RSS = crossprod(fit$residuals)
MSE = RSS/length(fit$residuals)
RMSE <- sqrt(MSE)
cat("Model error measures: RSS=",RSS, ", MSE=",MSE,", RMSE=",RMSE, "\n" )
}
library(tidyverse)
library(ggpubr)
# this function takes in your data and splits it before 2004 (training) and after 2004(test data)
# list of two dataframes is returned, first one is train, second one is test
split_data <- function(df){
train = df %>% filter(Year <= 2004)
test = df %>% filter(Year > 2004)
return(list(train,test))
}
describe_fit <- function(fit){
cat("Your Model: ", as.character(fit$call), "\n")
RSS = crossprod(fit$residuals)
MSE = RSS/length(fit$residuals)
RMSE <- sqrt(MSE)
cat("Model error measures: RSS=",RSS, ", MSE=",MSE,", RMSE=",RMSE, "\n" )
}
library(tidyverse)
library(ggpubr)
# this function takes in your data and splits it before 2004 (training) and after 2004(test data)
# list of two dataframes is returned, first one is train, second one is test
split_data <- function(df){
train = df %>% filter(Year <= 2004)
test = df %>% filter(Year > 2004)
return(list(train,test))
}
describe_fit <- function(fit){
cat("Your Model: ", as.character(fit$call), "\n")
RSS = crossprod(fit$residuals)
MSE = RSS/length(fit$residuals)
RMSE <- sqrt(MSE)
cat("Model error measures: RSS=",RSS, ", MSE=",MSE,", RMSE=",RMSE, "\n" )
}
data <- read.csv("potential_datasets/ClimateChange/climate_change_with_tempC.csv", sep = ",", header = T)
View(data)
library(tidyverse)
library(ggpubr)
# this function takes in your data and splits it before 2004 (training) and after 2004(test data)
# list of two dataframes is returned, first one is train, second one is test
split_data <- function(df){
train = df %>% filter(Year <= 2004)
test = df %>% filter(Year > 2004)
return(list(train,test))
}
describe_fit <- function(fit){
cat("Your Model: ", as.character(fit$call), "\n")
RSS = crossprod(fit$residuals)
MSE = RSS/length(fit$residuals)
RMSE <- sqrt(MSE)
cat("Model error measures: RSS=",RSS, ", MSE=",MSE,", RMSE=",RMSE, "\n" )
}
data <- read.csv("potential_datasets/ClimateChange/climate_change_with_tempC.csv", sep = ",", header = T)
# remove all NAs from data
data = na.omit(data)
df = split_data(data) # we split data before and after 2004
train = df[[1]] # we will use data from 1983 - 2004 to make(train) a model
test = df[[2]] # we will use data from 2004 - 2008 to validate (test) our model
ggplot(train, aes(x = N2O, y = TempC))+
geom_point() +
stat_cor() +
geom_smooth(method = "lm") +
theme_minimal()
View(train)
# Change your working directory to RIT_Seminar_Data_Science folder
data <- read.csv("potential_datasets/ClimateChange/climate_change_with_tempC.csv", sep = ",", header = T)
# remove all NAs from data
data = na.omit(data)
df = split_data(data) # we split data before and after 2004
train = df[[1]] # we will use data from 1983 - 2004 to make(train) a model
test = df[[2]] # we will use data from 2004 - 2008 to validate (test) our model
View(test)
ggplot(train, aes(x = N2O, y = TempC))+
geom_point() +
stat_cor() +
geom_smooth(method = "lm") +
theme_minimal()
library(tidyverse)
library(ggpubr)
# this function takes in your data and splits it before 2004 (training) and after 2004(test data)
# list of two dataframes is returned, first one is train, second one is test
split_data <- function(df){
train = df %>% filter(Year <= 2004)
test = df %>% filter(Year > 2004)
return(list(train,test))
}
describe_fit <- function(fit){
cat("Your Model: ", as.character(fit$call), "\n")
RSS = crossprod(fit$residuals)
MSE = RSS/length(fit$residuals)
RMSE <- sqrt(MSE)
cat("Model error measures: RSS=",RSS, ", MSE=",MSE,", RMSE=",RMSE, "\n" )
}
############################### We start here, do not change things above ############################
# Change your working directory to RIT_Seminar_Data_Science folder
data <- read.csv("potential_datasets/ClimateChange/climate_change_with_tempC.csv", sep = ",", header = T)
# remove all NAs from data
data = na.omit(data)
df = split_data(data) # we split data before and after 2004
train = df[[1]] # we will use data from 1983 - 2004 to make(train) a model
test = df[[2]] # we will use data from 2004 - 2008 to validate (test) our model
# Make plots:
## N20 - Temp
ggplot(train, aes(x = N2O, y = TempC))+
geom_point() +
stat_cor() +
geom_smooth(method = "lm") +
theme_minimal()
## CH4 - Temp
## CO2 - Temp
## CFC.11 - Temp
## MEI - Temp
## CFC.12-Temp
## TSI - Temp
# make LM fit for individual parameter and then adding one by one
# describe RMSE and R^2 for few models
# When you think you have the best model, make model with those parameters
# predict on test data and see how much are we off
ggplot(train, aes(x = CH4, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm")
ggplot(train, aes(x = CH4, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm") +
theme_minimal()
ggplot(train, aes(x = N2O, y = TempC))+
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
ggplot(train, aes(x = CH4, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm") +
theme_minimal()
ggplot(train, aes(x = CO2, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm") +
theme_minimal()
ggplot(train, aes(x = CFC.11, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm") +
theme_minimal()
ggplot(train, aes(x = MEI, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm") +
theme_minimal()
ggplot(train, aes(x = CFC.12, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm") +
theme_minimal()
ggplot(train, aes(x = TSI, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm") +
theme_minimal()
fit = lm(TempC ~ CO2, train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CH4 , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + N2O , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.11 , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.12 , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.12 + CFC.11 , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.11 + CH4 , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.12 + CH4 , train)
summary(fit)
describe_fit(fit)
View(train)
fit = lm(TempC ~ CO2 + CFC.12 + CFC.11 + CH4 + N2O + TSI , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.12 + CFC.11  + N2O + TSI , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.12 + CFC.11 + TSI , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.12 + CFC.11 + TSI , train)
summary(fit)
describe_fit(fit)
fit = lm(TempC ~ CO2 + CFC.12 + CFC.11 + TSI , train)
summary(fit)
describe_fit(fit)
predict(fit, test)
(test$TempC - y_hat)
y_hat = predict(fit, test)
(test$TempC - y_hat)
(test$TempC - y_hat)^2
1/length(y_hat) * (test$TempC - y_hat)^2
fit = lm(TempC ~ CO2 + CFC.12 + CFC.11 + TSI , train)
summary(fit)
y_hat = predict(fit, test)
1/length(y_hat) * (test$TempC - y_hat)^2
fit = lm(TempC ~ CO2 + CFC.12 + CFC.11 + TSI , train)
summary(fit)
describe_fit(fit)
ggplot(train, aes(x = CO2, y = TempC)) +
geom_point() +
stat_cor() +
geom_smooth(method="lm") +
theme_minimal()
setwd("~/Desktop/RIT_Seminar_Data_Science/r_assignment")
# load the data
data = read.csv("guided_project_data.csv", sep = ",", header = T)
library(ggpubr)
cor.test(train$CO2, train$TempC)
?remove.packages()
remove.packages(ggpubr)
remove.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
install.packages("ggpubr", dependencies = T)
install.packages("ggpubr", dependencies = T)
install.packages("ggpubr", dependencies = T)
install.packages("ggpubr", dependencies = T)
